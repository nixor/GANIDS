     1	from acegafunc import *
     2	
     3	
     4	def main():
     5	    #random.seed(12) #uncommet this for testing
     6	    pop = toolbox.population(n=n_pop) #CREATE POPULATION
     7	
     8	    print("Start of evolution")
     9	    
    10	    # Evaluate the entire population
    11	    fitnesses = list(map(toolbox.evaluate, pop)) #THIS LINE MUST BE UNDERSTOOD
    12	    for ind, fit in zip(pop, fitnesses):
    13	        ind.fitness.values = fit
    14	
    15	    print " "
    16	    print(" Evaluated %i individuals" % len(pop))
    17	    
    18	    # Begin the evolution
    19	    round_gen = 0
    20	    for g in range(NGEN):
    21	        try:
    22	            k = g+1
    23	            round_gen += 1
    24	
    25	            global wildcardWeight
    26	            if wcw_switching == True:
    27	                if g%wcw_swapGen == 0:
    28	                    wildcardWeight = wcw_b
    29	                else:
    30	                    wildcardWeight = wcw_a
    31	
    32	            # Initialize new population
    33	            offspring = []
    34	            
    35	            # Select the next generation individuals
    36	            elites = toolbox.selectE(pop) # select elites for next gen
    37	
    38	            offspring = toolbox.select(pop, int(len(pop)/sel_divisor))#len(pop))
    39	            #print "LEN OFFFFF", len(offspring)
    40	            # Clone the selected individuals
    41	            offspring = list(map(toolbox.clone, offspring))
    42	
    43	            # Apply crossover on the offspring individuals
    44	            # first we shuffle list members positions.
    45	            # Then we mate every two members next to one another
    46	            random.shuffle(offspring) 
    47	            for child1, child2 in zip(offspring[::2], offspring[1::2]):
    48	                if random.random() < CXPB:
    49	                    toolbox.mate(child1, child2)
    50	                    del child1.fitness.values
    51	                    del child2.fitness.values
    52	
    53	            # Apply mutation on the offsping individuals
    54	            for idx, individual in enumerate(offspring):
    55	                if random.random() < enterMutation: # no need bcuz MUTPB in def
    56	                    mutor = toolbox.clone(individual) #variable initilization
    57	                    mutor = toolbox.mutate(mutor)
    58	                    #print "##MUT##", mutor
    59	                    del mutor.fitness.values
    60	                    offspring[idx] = mutor
    61	
    62	            #invalid_ind = [ind for ind in offspring if not ind.fitness.valid]
    63	            #fitnesses = map(toolbox.evaluate, invalid_ind)
    64	
    65	    #-- VIII -- Optimizers --------------------------------------------------------
    66	
    67	
    68	            
    69	            #-- Ace Comparison
    70	            elites = aceComparison(elites)
    71	
    72	            for i in elites:
    73	                offspring.append(i)
    74	
    75	            mutatedElites = 0
    76	            if mutateElitesWildcards == True:
    77	                
    78	                for ind in elites:
    79	                    mutant = mutateWcardGene_rand(ind)
    80	                    if mutant != ind:
    81	                        mutatedElites += 1
    82	                        #print mutant
    83	                        offspring.append(mutant)
    84	                        #print offspring[-1]
    85	
    86	        #    print "###", len(offspring)
    87	
    88	            weaklings = tools.selWorst(offspring, (baseWeaklings + len(elites) + mutatedElites))
    89	            for i in weaklings:
    90	                offspring.remove(i)
    91	
    92	            #This could be used in the same way to eliminate individuals like weaklings but..
    93	            #offspring = list(offspring for offspring,_ in itertools.groupby(offspring))
    94	
    95	            n_lost = n_pop - len(offspring) #No. of individuals lost due to 
    96	            for i in range(n_lost):         #duplication or weaklings weeded out
    97	                new_ind = toolbox.individual()
    98	                #print new_ind
    99	                offspring.append(new_ind)   #we replace them
   100	
   101	            # Evaluate the individuals with an invalid fitness
   102	            invalid_ind = [ind for ind in offspring if not ind.fitness.valid]
   103	            fitnesses = map(toolbox.evaluate, invalid_ind)
   104	            #for i, (k, j) in enumerate(zip(popza, (fitneys[i][0],))):
   105	            
   106	            for ind, fit in zip(invalid_ind, fitnesses):
   107	                ind.fitness.values = fit
   108	
   109	    #- End VIII ---------------------------------------------------------------------
   110	
   111	            # The population is entirely replaced by the offspring
   112	            random.shuffle(offspring)
   113	            pop[:] = offspring
   114	
   115	    #-- IX --- Statistics and Each loop Outputs -------------------------------------
   116	
   117	            # Gather all the fitnesses in one list and print the stats
   118	            if show_stats == True:
   119	                print("-- Generation %i --" % k)
   120	                print(" Evaluated %i individuals" % len(invalid_ind))
   121	                fits = [ind.fitness.values[0] for ind in pop]
   122	                
   123	                length = len(pop)
   124	                mean = sum(fits) / length
   125	                sum2 = sum(x*x for x in fits)
   126	                std = abs(sum2 / length - mean**2)**0.5
   127	                #mx = float(max(fits))
   128	
   129	                print(" individuals: %s" % len(pop))
   130	                print(" weaklings: %s" % len(weaklings))
   131	                print(" elites: %s" % len(elites))
   132	                print(" Mutated Elites: %s" % mutatedElites)
   133	                print(" Audit data: %s lines" % len(auditData))
   134	                #print(" Min %s" % min(fits))
   135	                print(" Max %s" % max(fits))
   136	                #print(" mxp %.3f %%" % mxp)
   137	                print(" Avg %s" % mean)
   138	                print(" Std %s \n" % std)
   139	                if show_elites == True and elitesNo >= 6:
   140	                    bestElites = tools.selBest(elites,20)
   141	                    for idx, i in enumerate(bestElites):
   142	                        print "%3d" % idx, "fv: %.14f" % i.fitness.values, i
   143	                elif show_elites == True:
   144	                    for idx, i in enumerate(elites):
   145	                        print "%3d" % idx, "fv: %.14f" % i.fitness.values, i            
   146	                print("------End Generation %s" % k)
   147	                print "\n"
   148	            #print fitnesses
   149	
   150	        except KeyboardInterrupt:
   151	            print "You hit Crt-C to prematurely exit the loop"
   152	            break
   153	
   154	    
   155	#- End IX : Ends main()----------------------------------------------------------
   156	
   157	    global wildcardPenalty
   158	    #wildcardPenalty = False
   159	    wildcardPenalty = True
   160	
   161	    fitnesses = list(map(toolbox.evaluate, pop)) #re-evaluate fitness without wildcard penalty
   162	    for ind, fit in zip(pop, fitnesses):
   163	        ind.fitness.values = fit  
   164	
   165	    print "Best individuals are: " #% (best_ind, best_ind.fitness.values))
   166	    bestInds = tools.selBest(pop, Result_numbers)
   167	
   168	    for i, j in enumerate(bestInds):
   169	        print "%3d" % i, "fv: %.14f" % j.fitness.values, j
   170	
   171	    print "\n\n"
   172	    #Remove duplicate individuals from the results
   173	    #bestInds.sort()
   174	    bestInds = tools.selBest(bestInds, len(bestInds))
   175	    bestInds = list(bestInds for bestInds,_ in itertools.groupby(bestInds))
   176	    print "Best individuals (duplications removed) are: "
   177	    for i, j in enumerate(bestInds):
   178	        print "%3d" % i, "fv: %.14f" % j.fitness.values, j
   179	
   180	    #Show Best individuals by attack types
   181	    bestAttkTypes = toolbox.selectE(bestInds)
   182	    print "\n\n"
   183	    print "Best individuals by attack types are: "
   184	    for i, j in enumerate(bestAttkTypes):
   185	        if j.fitness.values[0] > 0.0:
   186	            print "%9s" % j[14][0:16], "%3d" % i, "fv: %.14f" % j.fitness.values, j
   187	            #print "%3d" % i, "fv: %.14f" % j.fitness.values, j
   188	
   189	    #topknots = bestAttkTypes #comment if topknot filter is used.
   190	    
   191	# TOPKNOTS Filter -------------------------------------------------------------------
   192	    #uniq_attack
   193	    topknots = []
   194	    
   195	    for i in uniq_attack:
   196	        space = []
   197	        jail = []
   198	        for j in bestAttkTypes:
   199	            if j[-1] == i:
   200	                space.append(j)
   201	        
   202	        global topgun
   203	        topgun = tools.selBest(space, 1)
   204	        topgun = topgun[0] #THE BEST ONE of that attack type
   205	
   206	        space = tools.selBest(space, bestTopKnots)
   207	        for i in space:
   208	            topknots.append(i)
   209	        
   210	    print "\n\n"
   211	    print "topknots individuals are: "
   212	    for i, j in enumerate(topknots):
   213	        if j.fitness.values[0] > 0.7:
   214	            print "%9s" % j[14][0:16], "%3d" % i, "fv: %.14f" % j.fitness.values, j
   215	
   216	 
   217	# END TopKnots -------------------------------------------------------------------------------
   218	
   219	    print "We ran", round_gen, "rounds"
   220	
   221	    #Write result to rulesDump.rcd file
   222	    rules = []
   223	    rulesDumpFile = open('rulesDump.rcd', 'w+')
   224	    for item in topknots:
   225	        line = ""
   226	        if item.fitness.values[0] > 0.7:
   227	            for i in item:
   228	                line = line.__add__(str(i) + ' ')
   229	            
   230	            rules.append(line)
   231	
   232	    for idx, item in enumerate(rules):
   233	        item = str(idx+1) + " " + item
   234	        rulesDumpFile.write("%s\n" % item)
   235	    rulesDumpFile.close()
   236	
   237	if __name__ == "__main__":
   238	    main()
   239	
   240	print "Took: ", time()-start_time, " seconds"